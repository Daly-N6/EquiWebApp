package ie.example.webapp.dao.implementation;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import ie.example.webapp.dao.implementation.*;
import ie.example.webapp.models.Horses;
import ie.example.webapp.dao.HorsesDao;

@Repository
public class HorsesDaoImpl implements HorsesDao {
    // SQL for selecting horses
    private final String SELECT_SQL = "SELECT * FROM dbo.Horses";
    private final String SELECT_SQL_BY_ID = "SELECT * FROM dbo.Horses WHERE microchip = ?";
    private final String SELECT_SQL_BY_HORSE_NAME = "SELECT * FROM dbo.Horses WHERE horseName = ?";

    // Search query - note named parameter
    private final String SELECT_SQL_BY_SEARCH = "SELECT * FROM dbo.Horses WHERE horseName like :search or microchip like :search";
    private final String INSERT_SQL = "INSERT INTO Horses(microchip,horsename,sex,dateofbirth,breed,weight, heght) values(?,?,?,?,?,?,?)";
    private final String UPDATE_SQL = "UPDATE dbo.Horses SET horseName = ?, microchip = ?, sex = ?, breed = ?, weight = ?, height = ? WHERE microchip = ?";
    private final String DELETE_SQL_BY_ID = "DELETE FROM dbo.Horses WHERE microchip = ?";

    // Spring JdbcTempate helps with storing and retrieving

    @Autowired
    private JdbcTemplate jdbcTemplate;

    // Implement findAll() which retrieves all horses from the DB
    // HorsesMapper() converts rows from the result into Horses objects
    public List<Horses> findAll() {
        return jdbcTemplate.query(SELECT_SQL, new HorsesMapper());
    }

    // Return horses by microchip ID
    public Horses findById(int microchip) {
        return jdbcTemplate.queryForObject(SELECT_SQL_BY_ID, new Object[] { microchip }, new HorsesMapper());
    }

    // return horses by name
    public List<Horses> findByHorseName(String horseName) {
        return jdbcTemplate.query(SELECT_SQL_BY_HORSE_NAME, new Object[] { horseName }, new HorsesMapper());
    }

    // return a list of horsess matching search term
    public List<Horses> findBySearchText(String searchText) {

        // The named parameter template assigns values to the named parameters (as
        // opposed to ?) in an SQL statement
        NamedParameterJdbcTemplate namedParamJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);
        MapSqlParameterSource parameters = new MapSqlParameterSource();

        // Set the :search parameter
        // % is a wildcard - the search term will be used to match files using the like
        // operator
        // https://www.w3schools.com/SQL/sql_like.asp
        parameters.addValue("search", "%" + searchText + "%");

        // execute the query with named parameters
        // use horsesMapper() to process the resultset and return the resulting horses
        // list
        return namedParamJdbcTemplate.query(SELECT_SQL_BY_SEARCH, parameters, new HorsesMapper());
    }

    // Create a new horses
    public Horses create(final Horses horses) {

        // A new Primary key (identity) value will be generated by the database on
        // insert
        // This value is retrieved using KeyHolder
        KeyHolder holder = new GeneratedKeyHolder();
        jdbcTemplate.update(new PreparedStatementCreator() {
            @Override
            // Prepared statement replaces ? parameters with values
            // Create the statement and connect
            public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
                PreparedStatement ps = connection.prepareStatement(INSERT_SQL, Statement.RETURN_GENERATED_KEYS);
                // Set each parameter by index (of ? in SQL) and value
                ps.setInt(1, horses.getMicrochip());
                ps.setString(2, horses.getHorseName());
                ps.setString(3, horses.getBreed());
                ps.setString(4, horses.getSex());
                ps.setDate(5, (Date) horses.getDateOfBirth());
                ps.setString(6,horses.getWeight());
                ps.setInt(7,horses.getHeight());

				// return the completed statement
				return ps;
			}
		}, holder);

		// Get the new id and assign it to the new horses object
		int newMicrochip = holder.getKey().intValue();
		horses.setMicrochip(newMicrochip);

		// Return the newly created horses
		return horses;
	}

	// Update an existing horses
	public int update(final Horses horses) {

		// Update horses using values in horses object passed as a parameter
		// As this is an update a new primary key id is not required

		// The quesry requires 6 parameters which will be passed as an object
		Object[] params = {
			horses.getHorseName(),
			horses.getMicrochip(),
			horses.getBreed(),
			horses.getSex(),
			horses.getDateOfBirth(),
            horses.getWeight(),
            horses.getHeight()            
		};

		// execute the query using params, returning the number of rows affected
        return jdbcTemplate.update(UPDATE_SQL, params);
	}
	
	// Delete a horses by id
	public int delete(int id) {

		// Use the delete sql, setting the id paramater
		// This method returns the number of rows affected
		return jdbcTemplate.update(DELETE_SQL_BY_ID, new Object[] {id});

	} 

   
    } // This class converts resultset rows (from the sql execution) into Java objects 
    class HorsesMapper implements RowMapper<Horses> { 
        @Override 
        public Horses mapRow(ResultSet rs, int rowNum) throws SQLException {
            Horses h = new Horses(); 
            h.setMicrochip(rs.getInt("Microchip")); 
            h.setDateofBirth(rs.getDate("DateOfBirth")); 
            h.setHorseName(rs.getString("HorseName")); 
            h.setBreed(rs.getString("Breed")); 
            h.setWeight(rs.getString("Weight")); 
            h.setHeight(rs.getInt("Height"));  
            h.setSex(rs.getString("Sex")); 
            return h; 
        }
       
    
    }




